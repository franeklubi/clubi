openapi: 3.0.3
info:
  title: clubi
  version: 1.0.0
  contact:
    email: franek@franeklubi.com
    name: franeklubi
    url: 'http://franeklubi.com'
  license:
    name: MIT License
    url: 'https://github.com/franeklubi/clubi/blob/master/LICENSE'
servers:
  - url: 'https://clubi.franeklubi.com/api'
    variables: {}
    description: official clubi server
paths:
  /register:
    summary: Register a new user
    post:
      summary: Exchange a new user info for auth token
      operationId: register.POST
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
                  description: >-
                    Password confirmation field (should be identical to
                    password)
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                success:
                  value: |-
                    {
                        "user": {
                            "username": "franeklubi",
                            "id": 1
                        },
                        "token": "1|YE0BqnqzzXA5rOHCuZ6Uu9CP7lVc8qrXcyoWxO1V"
                    }
                no_data:
                  value: |-
                    {
                        "username": [
                            "The username field is required."
                        ],
                        "email": [
                            "The email field is required."
                        ],
                        "password": [
                            "The password field is required."
                        ]
                    }
      tags:
        - Account
  /login:
    summary: Login an existing user
    post:
      summary: Exchange an existing user's info for auth token
      operationId: login.POST
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                device_name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                success:
                  value: |-
                    {
                        "user": {
                            "id": 1,
                            "is_admin": "0",
                            "username": "franeklubi"
                        },
                        "token": "2|1YseBF2yz0wKhmzNaxZ2wnwPZhv7AYNeR4YB4TM0"
                    }
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                no_data:
                  value: |-
                    {
                        "message": "The given data was invalid.",
                        "errors": {
                            "email": [
                                "The email field is required."
                            ],
                            "password": [
                                "The password field is required."
                            ],
                            "device_name": [
                                "The device name field is required."
                            ]
                        }
                    }
      tags:
        - Account
  '/profile/{username}':
    summary: Get user's profile info
    get:
      summary: Get user with profile info
      operationId: profile.GET
      parameters:
        - in: path
          name: username
          schema:
            type: integer
          required: true
          description: username
      responses:
        '200':
          description: Successful profile fetch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                success:
                  value: |-
                    {
                        "user": {
                            "id": 1,
                            "is_admin": "0",
                            "username": "franeklubi",
                            "profile": {
                                "profile_picture": "/const_assets/default_profile_picture.png",
                                "description": "example description"
                            }
                        }
                    }
                wrong_or_empty_username:
                  value: |-
                    {
                        "user": null
                    }
      tags:
        - Public
  /:
    summary: Dashboard
    get:
      summary: Random posts or user's feed
      description: >-
        Returns one page of random posts if not authenticated OR user's feed if
        authenticated
      operationId: root.GET
      tags:
        - Public
      responses:
        '200':
          description: >-
            Cached, random posts for unauthenticated user.

            Make note of the `next_page_url` - now it is empty, but you can use
            it as an indicator as to whether there are more posts to load - and
            them load them using GET on that link.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  /popular:
    summary: Popular groups
    get:
      summary: Returns an array of the most popular groups
      description: ''
      operationId: popular.GET
      responses:
        '200':
          description: Array of the most popular groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      tags:
        - Public
  /groups/search:
    summary: Lets You search for groups
    get:
      summary: Searches for groups by provided query
      description: ''
      operationId: groups.search.GET
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Groups' name or unique string id
      responses:
        '200':
          description: Array of found groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
                  zero_warning:
                    description: Appears when there are no groups returned
                    type: string
      tags:
        - Public
  '/groups/{group_string_id}':
    summary: Get group's info
    get:
      summary: Get group's info
      operationId: groups.GET
      parameters:
        - in: path
          name: group_string_id
          description: Group's unique string id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returns group's info
          content:
            application/json:
              schema:
                type: object
                properties:
                  group:
                    $ref: '#/components/schemas/Group'
                  editable:
                    type: boolean
                  is_member:
                    type: boolean
      tags:
        - Public
  '/groups/{group_string_id}/posts':
    summary: Return paginated posts for a group
    get:
      summary: Get paginated posts for a group
      operationId: groups.posts.GET
      parameters:
        - in: path
          name: group_string_id
          description: Group's unique string id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returns group's posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
      tags:
        - Public
  '/groups/{group_string_id}/posts/{post_id}/comments':
    summary: Return paginated comments for a post
    get:
      summary: Get paginated comments for a post
      operationId: groups.posts.comments.GET
      parameters:
        - in: path
          name: group_string_id
          description: Group's unique string id
          schema:
            type: string
          required: true
        - in: path
          name: post_id
          description: Post's id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returns posts's comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pagination'
      tags:
        - Public
components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        owner_id:
          type: integer
        name:
          type: string
        id_string:
          description: unique string id
          type: string
        banner_picture:
          description: relative url to banner picture
          type: string
        private:
          type: boolean
        user_count:
          type: integer
        post_count:
          type: integer
        owner:
          description: 'OWNER MIGHT NOT BE LOADED, CHECK BEFORE USING'
          type: object
          properties:
            id:
              type: integer
            is_admin:
              type: boolean
            usename:
              type: string
    Like:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
    Profile:
      type: object
      properties:
        profile_picture:
          description: relative url path to profile picture
          type: string
        description:
          type: string
    User:
      type: object
      description: >-
        PROFILE MIGHT NOT BE LOADED, CHECK IF THE PROFILE IS LOADED BEFORE
        ACCESSING
      properties:
        id:
          type: integer
        is_admin:
          type: boolean
        username:
          type: string
        profile:
          $ref: '#/components/schemas/Profile'
    Post:
      type: object
      properties:
        id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        user_id:
          type: integer
        group_id:
          type: integer
        content:
          type: string
        picture:
          description: relative url path to picture if posted
          type: string
        user:
          $ref: '#/components/schemas/User'
        group:
          $ref: '#/components/schemas/Group'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
    Comment:
      type: object
      properties:
        id:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        picture:
          description: relative url of the image if posted
          type: string
        user:
          $ref: '#/components/schemas/User'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        first_page_url:
          type: string
        from:
          type: integer
        next_page_url:
          type: string
        path:
          type: string
        per_page":
          type: string
        prev_page_url:
          type: string
        to:
          type: integer
        data:
          type: array
          description: 'Depends on endpoint, will return either paginated posts or comments'
          items:
            oneOf:
              - $ref: '#/components/schemas/Post'
              - $ref: '#/components/schemas/Comment'
tags:
  - name: Account
    description: Paths pertaining to user's account
  - name: Public
    description: Paths accessible without authentication
  - name: Auth
    description: Paths accessible only after authentication
